<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>nodeJs</title>
    <url>/2020/11/25/nodeJs/</url>
    <content><![CDATA[<h2 id="Node-js服务"><span class="heading-link">Node.js服务</span></h2><h3 id="1-了解Node-js"><span class="heading-link">1. 了解Node.js</span></h3><ul>
<li><p>官网：<span class="external-link"><a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a><i class="fa fa-external-link"></i></span></p>
</li>
<li><p>定义：Node.js是一个基于chrome V8引擎的JavaScript运行时</p>
</li>
</ul>
<h3 id="2-Koa框架"><span class="heading-link">2. Koa框架</span></h3><ul>
<li><p>官网：<span class="external-link"><a href="https://koa.bootcss.com/" target="_blank" rel="noopener">koa</a><i class="fa fa-external-link"></i></span></p>
</li>
<li><p>koa是Node.js的下一代Web框架</p>
</li>
<li><p>koa作为一个Node.js的框架，代码量非常之少</p>
</li>
</ul>
<h3 id="3-XMLHttpRequest对象"><span class="heading-link">3. XMLHttpRequest对象</span></h3><ul>
<li><p>简称XHR</p>
</li>
<li><p>XMLHttpRequest = XML+Http+Request</p>
</li>
<li><p>其本质一个可以发送Http请求，处理Http响应，与服务器之间进行异步交换数据的对象，其核心是Http。</p>
</li>
</ul>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DUvldO" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUvldO.png" alt="DUvldO.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ul>
<li><strong>XMLHttpRequest的使用</strong></li>
</ul>
<blockquote>
<p><strong>分四步走：</strong></p>
<p><span class="external-link"><a href="https://imgchr.com/i/DUv1oD" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUv1oD.png" alt="DUv1oD.png"></a><i class="fa fa-external-link"></i></span></p>
<p>所以要了解XMLHttpRequest对象，就要先了解Http</p>
</blockquote>
<ol start="4">
<li><h3 id="Http请求"><span class="heading-link">Http请求</span></h3></li>
</ol>
<blockquote>
<p>一个Http请求由4个 部分组成：</p>
</blockquote>
<ul>
<li><p>Http请求的方法：get、post、delete、put</p>
</li>
<li><p>正在请求的url(/home/index.html)</p>
</li>
<li><p>请求头（可选）</p>
</li>
<li><p>请求的主体（可选）</p>
</li>
</ul>
<blockquote>
<p>所以先创建XMLHttpRequest对象后，调用XMLHttpRequest对象的open()方法去指定请求的两个必要部分：请求方法和url</p>
<p><span class="external-link"><a href="https://imgchr.com/i/DUvNQI" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUvNQI.png" alt="DUvNQI.png"></a><i class="fa fa-external-link"></i></span></p>
<p>open()的第一个参数指定Http请求方法，open()的第二个参数是URL，请求的主要内容，第三个参数”true”代表使用异步。如果有请求头的话，请求进程的下一个步骤是设置它。例如，POST请求需要”Content-type”。</p>
<p><span class="external-link"><a href="https://imgchr.com/i/DUvUyt" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUvUyt.png" alt="DUvUyt.png"></a><i class="fa fa-external-link"></i></span></p>
<p>（只在post请求时才使用）</p>
<p>使用XMLHttpRequest发起Http请求的最后一步是指定请求主体（可选）并向服务器发送它。</p>
<p>xhr.send()</p>
</blockquote>
<ol start="5">
<li><h3 id="Http响应"><span class="heading-link">Http响应</span></h3></li>
</ol>
<blockquote>
<p>服务器返回的Http响应包含3部分：</p>
</blockquote>
<ul>
<li><p>状态码，用来显示请求的成功和失败</p>
</li>
<li><p>响应头</p>
</li>
<li><p>响应主体</p>
</li>
</ul>
<p>readyState是一个整数，指定了Http请求的状态</p>
<p><span class="external-link"><a href="https://imgchr.com/i/DUv0w8" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUv0w8.png" alt="DUv0w8.png"></a><i class="fa fa-external-link"></i></span></p>
<ol start="6">
<li><h3 id="跨域请求"><span class="heading-link">跨域请求</span></h3></li>
</ol>
<ul>
<li>什么是同源策略</li>
</ul>
<blockquote>
<p>所谓同源是指"协议+域名+端口"三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。同源策略/SOP（Same origin policy）是一种约定，由 Netscape 公司 1995 年引入浏览器，它是浏览器最核心也最基本的安全功能，是一个著名的安全策略。现在所有支持 JavaScript 的浏览器都会使用这个策略。如果缺少了同源策略，浏览器很容易受到 XSS、 CSFR 等攻击。</p>
</blockquote>
<ul>
<li>什么是源</li>
</ul>
<ul>
<li><p>源（origin）就是协议、域名和端口号</p>
</li>
<li><p>若地址里面的协议、域名和端口号均相同则属于同源</p>
</li>
</ul>
<ul>
<li><p><span class="external-link"><a href="https://imgchr.com/i/DUvsYQ" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUvsYQ.png" alt="DUvsYQ.png"></a><i class="fa fa-external-link"></i></span></p>
</li>
<li><p>跨域（在两个不同域之间也可以成功获得另一个域名的信息）</p>
</li>
</ul>
<blockquote>
<p>跨域的方法：JSONP、Proxy、iframe、CORS</p>
<p>天然可以跨域的标签：script （img、link）</p>
<p><span class="external-link"><a href="https://imgchr.com/i/DUv2yq" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUv2yq.png" alt="DUv2yq.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>node初学</category>
      </categories>
      <tags>
        <tag>node js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS笔记--运算符(续)</title>
    <url>/2020/11/25/js%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="JS笔记（续）—运算符"><span class="heading-link">JS笔记（续）—运算符</span></h2><ol>
<li><h3 id="运算符定义："><span class="heading-link">运算符定义：</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DU7xuF" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DU7xuF.png" alt="DU7xuF.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="2">
<li><h3 id="算术运算符概述"><span class="heading-link">算术运算符概述</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DUHF9x" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUHF9x.png" alt="DUHF9x.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="3">
<li><h3 id="浮点数精度问题"><span class="heading-link">浮点数精度问题</span></h3></li>
</ol>
<blockquote>
<p><u>不要直接拿浮点数来计算，要尽量避开浮点数。</u></p>
<p><span class="external-link"><a href="https://imgchr.com/i/DUHZuD" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUHZuD.png" alt="DUHZuD.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="4">
<li><h3 id="表达式和返回值"><span class="heading-link">表达式和返回值</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DUHB80" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUHB80.png" alt="DUHB80.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="5">
<li><h3 id="递增、递减"><span class="heading-link">递增、递减</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DUHhP1" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUHhP1.png" alt="DUHhP1.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ul>
<li><strong>前置递增</strong></li>
</ul>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DUHqVH" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUHqVH.png" alt="DUHqVH.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ul>
<li><strong>后置递增</strong></li>
</ul>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DUb9sS" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUb9sS.png" alt="DUb9sS.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="5">
<li><h3 id="比较运算符"><span class="heading-link">比较运算符</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DUbFaj" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUbFaj.png" alt="DUbFaj.png"></a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://imgchr.com/i/DUbNQK" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUbNQK.png" alt="DUbNQK.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="7">
<li><h4 id="逻辑运算符"><span class="heading-link">逻辑运算符</span></h4></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DUq6AJ" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUq6AJ.png" alt="DUq6AJ.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ul>
<li><strong>逻辑与的短路运算</strong></li>
</ul>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DULD2t" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DULD2t.png" alt="DULD2t.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ul>
<li><strong>逻辑或的逻辑中断</strong></li>
</ul>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DULhPs" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DULhPs.png" alt="DULhPs.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="8">
<li><h3 id="赋值运算符"><span class="heading-link">赋值运算符</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DUL4Gn" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUL4Gn.png" alt="DUL4Gn.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="9">
<li><h3 id="运算符优先级"><span class="heading-link">运算符优先级</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DULTMV" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DULTMV.png" alt="DULTMV.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="10">
<li><h3 id="Switch语法使用"><span class="heading-link">Switch语法使用</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DULLa4" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DULLa4.png" alt="DULLa4.png"></a><i class="fa fa-external-link"></i></span></p>
<p><strong>注意事项：</strong></p>
<p><span class="external-link"><a href="https://imgchr.com/i/DULzxx" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DULzxx.png" alt="DULzxx.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="11">
<li><h3 id="Switch语句和if-else-if-语句的区别"><span class="heading-link">Switch语句和if else if 语句的区别</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DULvGR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DULvGR.png" alt="DULvGR.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="12">
<li><h3 id="断点调试"><span class="heading-link">断点调试</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DUOkIH" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUOkIH.png" alt="DUOkIH.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JS笔记</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX</title>
    <url>/2020/11/25/AJAX/</url>
    <content><![CDATA[<h2 id="第一节AJAX"><span class="heading-link">第一节AJAX</span></h2><h3 id="1-AJAX的产生"><span class="heading-link">1.  AJAX的产生</span></h3><p> <span class="external-link"><a href="https://imgchr.com/i/DU452F" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DU452F.png" alt="DU452F.png"></a><i class="fa fa-external-link"></i></span></p>
<h3 id=""><span class="heading-link"></span></h3><h3 id="2．-AJAX-的优势"><span class="heading-link">2．**  AJAX**的优势**</span></h3><p><span class="external-link"><a href="https://imgchr.com/i/DU4zxe" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DU4zxe.png" alt="DU4zxe.png"></a><i class="fa fa-external-link"></i></span></p>
<h3 id="3-AJAX简介"><span class="heading-link">3. AJAX简介</span></h3><ul>
<li><p><strong>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</strong></p>
</li>
<li><p><strong>AJAX = 异步 JavaScript 和 XML</strong></p>
</li>
<li><p><strong>AJAX 是一种用于创建快速动态网页的技术。</strong></p>
</li>
<li><p><strong>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</strong></p>
</li>
<li><p><strong>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</strong></p>
</li>
</ul>
<blockquote>
<p>**具体内容可参考</p>
<p><span class="external-link"><a href="https://www.w3school.com.cn/ajax/ajax_intro.asp" target="_blank" rel="noopener">w3cschool</a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="4-那XML有是什么呢？"><span class="heading-link">4. 那XML有是什么呢？</span></h3><ul>
<li><p><strong>XML 被设计用来传输和存储数据，HTML 被设计用来显示数据。</strong></p>
</li>
<li><p><strong>XML 指可扩展标记语言（EXtensible Markup Language）</strong></p>
</li>
<li><p><strong>XML 是一种标记语言，很类似 HTML</strong></p>
</li>
<li><p><strong>XML 的设计宗旨是传输数据，而非显示数据</strong></p>
</li>
<li><p><strong>XML 标签没有被预定义。您需要自行定义标签。</strong></p>
</li>
<li><p><strong>XML 被设计为具有自我描述性</strong></p>
</li>
<li><p><strong>XML 是独立于软件和硬件的信息传输工具。</strong></p>
</li>
</ul>
<h2 id="第二节-网络通信"><span class="heading-link">第二节 网络通信</span></h2><ol>
<li><h3 id="网络架构"><span class="heading-link">网络架构</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DU5ZRS" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DU5ZRS.png" alt="DU5ZRS.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="2">
<li><h3 id="TCP-IP"><span class="heading-link">TCP/IP</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DU5nMQ" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DU5nMQ.png" alt="DU5nMQ.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol start="3">
<li><h3 id="传输过程"><span class="heading-link">传输过程</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DU5JRU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DU5JRU.png" alt="DU5JRU.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="第三节-HTTP协议"><span class="heading-link">第三节 HTTP协议</span></h2><ol>
<li><h3 id="http协议"><span class="heading-link">http协议</span></h3></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DU5gQe" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DU5gQe.png" alt="DU5gQe.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol>
<li><strong>http协议的特点</strong></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DU52sH" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DU52sH.png" alt="DU52sH.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<ol>
<li><strong>三次握手</strong></li>
</ol>
<blockquote>
<p><span class="external-link"><a href="https://imgchr.com/i/DU5LLj" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DU5LLj.png" alt="DU5LLj.png"></a><i class="fa fa-external-link"></i></span></p>
</blockquote>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>AJAX初识</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>JS笔记</title>
    <url>/2020/10/11/JS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="第一章-数据类型"><span class="heading-link">第一章  数据类型</span></h2><h3 id="前言"><span class="heading-link">前言</span></h3><p>学习前端的已经有一段日子了，但是在JS的学习方面还是有所欠缺的<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8">😞</span>，所以现在写一些JS的相关笔记以督促自己。在学习的过程中，我发现做笔记还是很重要的<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8">📖</span>，同时笔记的格式也是十分重要的，一个潦草而无序的笔记只会让人看了更头疼，不做笔记很快就会忘记了，所以有了笔记就可以久不久翻出来看看，当笔记积累到一定程度后也会有一定的成就感。现在把暑假屯下来的笔记发出来了，当然后面还会有几篇笔记发出来。加油吧少年，奥里给<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8">💪</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8">💪</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8">💪</span></p>
<hr>
<!-- -->

<h3 id="基本定义"><span class="heading-link">基本定义</span></h3><!-- -->

<ol>
<li><strong>编程</strong></li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VwDI.jpg" alt=""></p>
</blockquote>
<p> 2.<strong>计算机语言</strong></p>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VdKA.jpg" alt=""></p>
</blockquote>
<ol start="3">
<li><strong>编程语言</strong></li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02V0bt.jpg" alt=""></p>
</blockquote>
<ol start="4">
<li><strong>翻译器</strong></li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VUvd.jpg" alt=""></p>
</blockquote>
<ol start="5">
<li><strong>编程语言和标记语言的区别</strong></li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VNgH.jpg" alt=""></p>
</blockquote>
<ol start="6">
<li><strong>总结</strong></li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VrUf.png" alt=""></p>
</blockquote>
<h3 id="计算机基础"><span class="heading-link">计算机基础</span></h3><hr>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VDVP.jpg" alt=""></p>
</blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02Vs58.jpg" alt=""></p>
<p>软件运行在硬件中</p>
<ol start="7">
<li><strong>数据存储</strong></li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02V6PS.jpg" alt=""></p>
</blockquote>
<ol start="8">
<li><strong>数据存储单位</strong></li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02Vc8g.png" alt=""></p>
</blockquote>
<ol start="9">
<li><strong>程序运行</strong></li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02Vg2Q.jpg" alt=""></p>
</blockquote>
<h3 id="JS的基本知识"><span class="heading-link">JS的基本知识</span></h3><hr>
<ol>
<li><p>js是一门高级的编程语言，而计算机只识别机器语言，中间需要JS引擎解释为机器语言。</p>
</li>
<li><p>脚本：逐行解析执行</p>
</li>
<li><p>浏览器分为渲染引擎和JS引擎</p>
</li>
</ol>
<ul>
<li><p><strong>渲染引擎</strong>：用来解析HTML和CSS，俗称内核，比如说chrome浏览器的blink。老版本webkit</p>
</li>
<li><p><strong>JS引擎：也称JS解析器，用来读取网页的JavaScript代码，对其处理后运行，比如chrome浏览器的V8</strong></p>
</li>
</ul>
<p><strong><code>注意：浏览器本身不会执行js代码，而是通过内置的JavaScript引擎（解析器）来执行JS代码，JS引擎执行代码逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以JavaScript语言归为脚本语言，逐行解释执行。</code></strong></p>
<ol start="4">
<li><strong>JS的组成</strong>：JavaScript由ECMAScript（JavaScript语法）、DOM（页面文档对象模型）、BOM（浏览器对象模型）</li>
</ol>
<blockquote>
<ul>
<li><p><strong>ECMAScript</strong>可以简单的说成是JavaScript，ECMAScript规定了JS的编程语法和基础的核心知识，是所有浏览完厂商共同遵守的一套JS语法工业标准。</p>
</li>
<li><p><strong>DOM</strong>是W3C组织推荐处理可扩展标记语言的标准编程接口，通过DOM提供的接口可以对页面上的元素进行操作（大小、位置、颜色等）。</p>
</li>
<li><p><strong>BOM</strong>可以与浏览器窗口进行互动的对象结构、通过BOM可以操作浏览器窗口，比如说弹出框、控制浏览器跳转、获取分辨率等</p>
</li>
</ul>
</blockquote>
<ol start="5">
<li><strong>JS的三种书写位置：</strong></li>
</ol>
<ul>
<li><strong>内嵌式</strong></li>
</ul>
<p><img src="https://s1.ax1x.com/2020/10/12/02V2vj.jpg" alt=""></p>
<ul>
<li><strong>行内式</strong></li>
</ul>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VWKs.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>外部式</strong></li>
</ul>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02Vfrn.jpg" alt=""></p>
</blockquote>
<ol start="6">
<li><strong>JS注释：</strong></li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02Vhbq.jpg" alt=""></p>
</blockquote>
<ol start="7">
<li><strong>JS的输入输出语句：</strong></li>
</ol>
<ul>
<li><p><strong>输入框：</strong> <em>prompt(‘这是一个输入框’);</em></p>
</li>
<li><p><strong>弹出警示框：*</strong>alert(‘计算结果是’);*</p>
</li>
<li><p><strong>控制台输出：*</strong>console.log(‘这是给程序员看的：’)；*</p>
</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/10/12/02V5V0.jpg" alt=""></p>
<h3 id="变量"><span class="heading-link">变量</span></h3><hr>
<ol>
<li><p>变量就是用于存储数据的<strong>容器</strong>，我们通过变量名获取数据</p>
</li>
<li><p>变量的<strong>本质</strong>：变量是程序内存中申请的一块用来存放数据的空间。</p>
</li>
<li><p>变量将以最后一个值为准</p>
</li>
<li><p><strong>变量名的规范</strong>：</p>
</li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02Vo5T.png" alt=""></p>
</blockquote>
<ol start="5">
<li><strong>变量小结：</strong></li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VIaV.jpg" alt=""></p>
<h3 id="数据类型"><span class="heading-link">数据类型</span></h3><hr>
</blockquote>
<ol>
<li><p>JavaScript是一种弱类型或者动态语言。即不用提前声明变量的类型，在程序运行过程中会被自动确定。</p>
</li>
<li><p>JavaScript拥有动态类型，同时也意味着相同的变量可以用作不同的类型。</p>
</li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02V7PU.jpg" alt=""></p>
</blockquote>
<ol start="3">
<li><strong>简单数据类型：</strong></li>
</ol>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VHGF.jpg" alt=""></p>
<p>Js中八进制前面加0，十六进制前面加0x</p>
</blockquote>
<p><em>A.  *</em>Number 数字型***</p>
<ul>
<li><strong>Js中的最大最小值：</strong></li>
</ul>
<p><img src="https://s1.ax1x.com/2020/10/12/02Vb24.jpg" alt=""></p>
<ul>
<li><strong>数字型的三个特殊值：</strong></li>
</ul>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VqxJ.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>isNaN()</strong></li>
</ul>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VOM9.jpg" alt=""></p>
</blockquote>
<p><em>B. *</em>字符串型String***</p>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VXrR.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>字符串嵌套</strong></li>
</ul>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02Vjq1.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>字符串转义符</strong></li>
</ul>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02VxVx.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>字符串长度</strong></li>
</ul>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02Vza6.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>字符串拼接（用’+’连接）</strong></li>
</ul>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02ZSIK.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>字符串拼接加强</strong></li>
</ul>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02Z9PO.jpg" alt=""></p>
</blockquote>
<p><em>C.  *</em>布尔型 Boolean***</p>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02ZCGD.jpg" alt=""></p>
</blockquote>
<p>D.  <strong>Undefined 和Null</strong></p>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/10/12/02ZPRe.jpg" alt=""></p>
</blockquote>
<ol start="4">
<li><strong>获取变量数据类型</strong></li>
</ol>
<ul>
<li><p><strong>typeof用来检测变量数据类型</strong></p>
</li>
<li><p><strong>通过控制台的颜色来判断属于什么类型</strong></p>
</li>
<li><p><strong>字面量</strong></p>
</li>
</ul>
<blockquote>
<p><img src="https://ftp.bmp.ovh/imgs/2020/10/ce1ea9521050e5e8.jpg" alt=""></p>
</blockquote>
<h3 id="数据类型的转换"><span class="heading-link">数据类型的转换</span></h3><hr>
<ol>
<li><strong>什么是数据类型的转换</strong></li>
</ol>
<blockquote>
<p><img src="https://ftp.bmp.ovh/imgs/2020/10/77efc66f79836555.jpg" alt=""></p>
</blockquote>
<ol start="2">
<li><strong>转换为字符串类型（加号拼接是重点，其他了解就行）</strong></li>
</ol>
<blockquote>
<p><img src="https://ftp.bmp.ovh/imgs/2020/10/170a92ee7f23d279.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>转换为数字型（重点）</strong></li>
</ul>
<blockquote>
<p><img src="https://ftp.bmp.ovh/imgs/2020/10/08fa86ec08865b47.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>转换为布尔型</strong></li>
</ul>
<blockquote>
<p><img src="https://ftp.bmp.ovh/imgs/2020/10/855edcce235ce8f9.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>拓展1（解释性语言和编译性语言）</strong></li>
</ul>
<blockquote>
<p><img src="https://ftp.bmp.ovh/imgs/2020/10/db04b2030f616c0d.jpg" alt=""></p>
<p><img src="https://ftp.bmp.ovh/imgs/2020/10/19d933316072f09f.jpg" alt=""></p>
</blockquote>
<ul>
<li><p><strong>拓展2</strong></p>
</li>
<li><p><strong>标识符</strong></p>
</li>
</ul>
<blockquote>
<p><img src="https://ftp.bmp.ovh/imgs/2020/10/4d29c69109cf8d92.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>关键字</strong></li>
</ul>
<blockquote>
<p><img src="https://ftp.bmp.ovh/imgs/2020/10/455ec336df72495e.jpg" alt=""></p>
</blockquote>
<ul>
<li><strong>保留字</strong></li>
</ul>
<blockquote>
<p><img src="https://ftp.bmp.ovh/imgs/2020/10/0a1ce2263a3431ee.jpg" alt=""></p>
</blockquote>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JS笔记</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>数组与函数--JS笔记</title>
    <url>/2020/10/11/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="数组与函数—JS笔记（续）"><span class="heading-link">数组与函数—JS笔记（续）</span></h2><h3 id="1-创建数组"><span class="heading-link">1. 创建数组</span></h3><ul>
<li><strong>利用new创建数组</strong></li>
</ul>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120356270.png" alt="image-20201125120356270"></p>
<ul>
<li><strong>利用数组字面量创建数组</strong></li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120403734.png" alt="image-20201125120403734"></p>
</blockquote>
<ul>
<li><strong>数组元素的类型</strong></li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120412576.png" alt="image-20201125120412576"></p>
</blockquote>
<p><strong>2. 数组索引</strong></p>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120420867.png" alt="image-20201125120420867"></p>
<p><strong>3. 数组长度</strong></p>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120427879.png" alt="image-20201125120427879"></p>
<p>可以动态监测数组元素</p>
<p><strong>4.</strong> <strong>新增数组元素</strong></p>
<ul>
<li>通过修改length长度来新增数组元素</li>
</ul>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120438270.png" alt="image-20201125120438270"></p>
<ul>
<li>通过修改索引号来追加数组元素</li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120451260.png" alt="image-20201125120451260"></p>
<p><strong>5. 函数</strong></p>
</blockquote>
<ul>
<li><strong>函数声明</strong></li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120522940.png" alt="image-20201125120522940"></p>
</blockquote>
<ul>
<li><strong>函数调用</strong></li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120528273.png" alt="image-20201125120528273"></p>
</blockquote>
<ul>
<li><strong>函数调用</strong></li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120542195.png" alt="image-20201125120542195"></p>
</blockquote>
<ul>
<li><strong>函数参数</strong></li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120548784.png" alt="image-20201125120548784"></p>
</blockquote>
<ul>
<li><strong>函数形参与实参不匹配问题</strong></li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120554940.png" alt="image-20201125120554940"></p>
</blockquote>
<ul>
<li><strong>return终止函数</strong></li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120602547.png" alt="image-20201125120602547"></p>
</blockquote>
<ul>
<li><strong>return 只能返回一个值，如果想要返回多个值，可以返回一个数组</strong></li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120610300.png" alt="image-20201125120610300"></p>
<p><strong>6. 函数返回值</strong></p>
</blockquote>
<ul>
<li>函数都有返回值</li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120618660.png" alt="image-20201125120618660"></p>
</blockquote>
<ul>
<li><strong>break、continue、return的区别</strong></li>
</ul>
<blockquote>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120625535.png" alt="image-20201125120625535"></p>
<p><strong>7. 变相看透函数</strong></p>
<p><img src="C:%5CUsers%5Clvlv%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201125120631930.png" alt="image-20201125120631930"></p>
</blockquote>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JS笔记</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>git常见命令的使用</title>
    <url>/2020/06/14/git%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="摘要"><span class="heading-link">摘要</span></h2><p>对于开发项目来说，我们经常用到的就是对项目的“源代码管理”，也以叫做“版本控制”，做源代码管理或版本控制的工具有很多，Git就是其中一种可以做版本控制的工具。为方便查看，写了这篇关于git命令的操作。</p>
<h2 id="对Git的说明"><span class="heading-link">对Git的说明</span></h2><p>Git本身是一个命令行工具，但是现在可以利用带图形界面的Git，比如说Source Tree ,Github Desktop等等，来更加方便的操作。但是还是有必要先熟悉命令行工具的使用。</p>
<h2 id="Git命令的使用"><span class="heading-link">Git命令的使用</span></h2><h3 id="初始化仓库"><span class="heading-link">初始化仓库</span></h3><h4 id="1-初始化仓库"><span class="heading-link">1.初始化仓库</span></h4><p>在命令行界面，先进入到项目所在目录 <code>cd [文件夹目录]</code></p>
<p>然后执行初始化命令</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://s1.ax1x.com/2020/06/13/txm3rT.png" alt="txm3rT.png"></p>
<p>初始化仓库就是创建一个空白的仓库，此命令只需执行一次，执行完后会在项目下面创建一个.git的目录</p>
<h4 id="2-观察-git目录内容"><span class="heading-link">2.观察.git目录内容</span></h4><p>查看.git目录下的东西 ，执行<code>ls -la.git</code></p>
<h3 id="查看项目当前状态"><span class="heading-link">查看项目当前状态</span></h3><p>查看项目当前的状态，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></tbody></table></div></figure>

<p><span class="external-link"><a href="https://imgchr.com/i/txmKGn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/13/txmKGn.png" alt="txmKGn.png"></a><i class="fa fa-external-link"></i></span></p>
<p><em>status</em> 是 <em>git</em> 的一个子命令，它的功能就是查看项目当前的状态。在做提交（Commit）之前，先用 <em>status</em> 查看一下项目当前的状态，它会告诉我们项目当前发生的一些变动（Changes），比如哪些文件被修改了，都修改了哪几行代码，新添加了什么，删除了什么等等。</p>
<p>我们的项目之前还没有做过任何提交，所以查看项目状态的时候，会显示有一些 <strong>Untracked file</strong>，表示还没有被跟踪的文件，就是还没有做源代码管理或者版本控制的文件。</p>
<h3 id="添加准备要提交的修改"><span class="heading-link">添加准备要提交的修改</span></h3><p>添加要包含在提交里的修改，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></tbody></table></div></figure>

<p>这里的<code>--all</code>意思就是要把在项目里当前发生的所有的变动全部包含在这次提交里。</p>
<p>但是我们有时候只想提交某一个文件时，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git add [文件名]</span><br></pre></td></tr></tbody></table></div></figure>

<h3 id="提交"><span class="heading-link">提交</span></h3><p>现在我们已经把要提交的变动放在了暂存区里，确定这次提交，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m 'init'</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://s1.ax1x.com/2020/06/13/txMeO0.png" alt="txMeO0.png"></p>
<p><em>m</em> 在这里表示 <em>message</em>，单引号<strong>‘</strong> <strong>’</strong>中的内容表示的是提交时的描述</p>
<h3 id="查看历史"><span class="heading-link">查看历史</span></h3><p>1.查看在项目里做的提交的历史记录，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://s1.ax1x.com/2020/06/13/txMlY4.png" alt="txMlY4.png"></p>
<p>2.</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></tbody></table></div></figure>

<p>这样会用更简单的形式展示历史记录。</p>
<h3 id="移除要提交的修改"><span class="heading-link">移除要提交的修改</span></h3><p>假设我们突然改主意了，想恢复之前的一个状态，也就是上一次提交的那个状态。如果不用 Git，你可能需要在编辑器里打开的这个文件的上面，不断地恢复之前对这个文件做的修改，这样就会显得很麻烦。</p>
<p>所以通过使用Git对源代码管理，执行相应的命令，就可以恢复当前对某个文件的修改。首先，第一步要做的是把它从暂存区里再拿出来，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git reset HEAD [修改的文件名]</span><br></pre></td></tr></tbody></table></div></figure>

<p>补充：重置一下最近做的这次提交</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git reset HEAD~</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://s1.ax1x.com/2020/06/13/txMYOx.png" alt="txMYOx.png"></p>
<p>第二步，恢复一下 要修改文件的状态，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git checkout -- src/main.js</span><br></pre></td></tr></tbody></table></div></figure>

<h3 id="分支"><span class="heading-link">分支</span></h3><h4 id="1：查看分支"><span class="heading-link">1：查看分支</span></h4><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></div></figure>

<h4 id="2：创建分支"><span class="heading-link">2：创建分支</span></h4><p>创建一个叫 <strong><em>develop\</em></strong> 的分支，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git branch develop</span><br></pre></td></tr></tbody></table></div></figure>

<h4 id="3：切换分支"><span class="heading-link">3：切换分支</span></h4><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></tbody></table></div></figure>

<h4 id="4：查看分支"><span class="heading-link">4：查看分支</span></h4><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></div></figure>

<p>多加了一个 <em>-a</em> 选项，它会显示项目里全部的分支</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></tbody></table></div></figure>

<h4 id="5：创建并切换分支"><span class="heading-link">5：创建并切换分支</span></h4><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git checkout -b develop</span><br></pre></td></tr></tbody></table></div></figure>

<h3 id="拉取远程仓库"><span class="heading-link">拉取远程仓库</span></h3><p>切换到 <em>master</em> 这个分支上，下载远程仓库里的新东西，同时可以把它们合并到当前这个分支上，也就是合并到 master 这个分支上</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></tbody></table></div></figure>

<p>设置了一下具体的远程，还有远程分支的名字，意思就是下载 <em>origin</em> 这个远程的 <em>master</em> 分支上的新东西，再把它们合并到本地当前的分支上。</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></tbody></table></div></figure>

<h3 id="合并分支"><span class="heading-link">合并分支</span></h3><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git merge [分支名]</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://s1.ax1x.com/2020/06/13/txMQkF.png" alt="txMQkF.png"></p>
<h3 id="推送到远程仓库"><span class="heading-link">推送到远程仓库</span></h3><p>origin为远程仓库的名字，master为本地的主分支</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></tbody></table></div></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>git常见命令的使用摘要</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建汇总</title>
    <url>/2020/01/06/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="几种常见的博客搭建资源汇总"><span class="heading-link">几种常见的博客搭建资源汇总</span></h1><h2 id="前言"><span class="heading-link">前言</span></h2><p>本文给出了几种常见的个人网站（博客）搭建方式的教程资源。官方文档为主，B站视频教程为辅。比较适合喜欢折腾的同学。不喜欢折腾的可以直接使用CSDN博客、博客园、<span class="external-link"><a href="https://www.yuque.com/yuque" target="_blank" rel="noopener"><strong>语雀</strong></a><i class="fa fa-external-link"></i></span>等提供的服务。<strong>别忘了博客的初心是记录</strong>。</p>
<a id="more"></a>
<p>常见的个人博客、网站、知识库搭建方式如下：</p>
<p><img src="https://img.vim-cn.com/f9/975cc8edad012fd6bb712fdbbc2d311d5309a4.png" alt=""></p>
<p>动态管理系统需要使用服务器部署，因为这些系统的数据大都存放在数据库。现今大部分的云服务商（<span class="external-link"><a href="https://www.alibabacloud.com/zh/campaign/free-trial?spm=a2796.7919406.1389991.dbannerazhfreetrial.5b8c2d23QXhsV9" target="_blank" rel="noopener">阿里云</a><i class="fa fa-external-link"></i></span>、<span class="external-link"><a href="https://amazonaws-china.com/cn/free/" target="_blank" rel="noopener">AWS</a><i class="fa fa-external-link"></i></span>、<span class="external-link"><a href="https://cloud.tencent.com/act/free" target="_blank" rel="noopener">腾讯云</a><i class="fa fa-external-link"></i></span>等等）大都提供了一个月甚至一年的服务器试用期。<!--more--></p>
<p>依赖静态站点生成器生成的网站不仅可以部署在服务器上，还可以利用一些免费的站点托管服务进行托管，比如<span class="external-link"><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub</a><i class="fa fa-external-link"></i></span>、<span class="external-link"><a href="https://coding.net/help/doc/pages" target="_blank" rel="noopener">Coding</a><i class="fa fa-external-link"></i></span>、<span class="external-link"><a href="https://coding.net/help/doc/pages" target="_blank" rel="noopener">Gitlab</a><i class="fa fa-external-link"></i></span>等提供的Pages服务和<span class="external-link"><a href="https://docs.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">Read the Docs</a><i class="fa fa-external-link"></i></span>的文档托管服务。深入折腾的同学还会接触到一些<span class="external-link"><a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" target="_blank" rel="noopener">CI/CD</a><i class="fa fa-external-link"></i></span>工具链、<span class="external-link"><a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/3132?fromtitle=SEO&amp;fromid=102990" target="_blank" rel="noopener">SEO</a><i class="fa fa-external-link"></i></span>技巧等等。</p>
<p>对于Web开发者，你可能会接触到一些BASS服务提供商，比如<span class="external-link"><a href="https://www.leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a><i class="fa fa-external-link"></i></span>、<span class="external-link"><a href="https://www.bmob.cn/" target="_blank" rel="noopener">Bmob</a><i class="fa fa-external-link"></i></span>、<span class="external-link"><a href="https://firebase.google.com/?hl=zh-cn" target="_blank" rel="noopener">firebase</a><i class="fa fa-external-link"></i></span>。</p>
<h2 id="1-WordPress搭建个人博客"><span class="heading-link">1.WordPress搭建个人博客</span></h2><p>首先根据维基百科来介绍一下WordPress：</p>
<blockquote>
<p><strong>WordPress</strong>是一个以<span class="external-link"><a href="https://zh.wikipedia.org/wiki/PHP" target="_blank" rel="noopener">PHP</a><i class="fa fa-external-link"></i></span>和<span class="external-link"><a href="https://zh.wikipedia.org/wiki/MySQL" target="_blank" rel="noopener">MySQL</a><i class="fa fa-external-link"></i></span>为平台的<span class="external-link"><a href="https://zh.wikipedia.org/wiki/自由及开放源代码软件" target="_blank" rel="noopener">自由开源</a><i class="fa fa-external-link"></i></span>的博客软件和<span class="external-link"><a href="https://zh.wikipedia.org/wiki/内容管理系统" target="_blank" rel="noopener">内容管理系统</a><i class="fa fa-external-link"></i></span>。WordPress具有插件架构和模板系统。截至2018年4月，排名前1000万的网站中超过30.6%使用WordPress。WordPress是最受欢迎的网站<span class="external-link"><a href="https://zh.wikipedia.org/wiki/内容管理系统" target="_blank" rel="noopener">内容管理系统</a><i class="fa fa-external-link"></i></span>。WordPress是当前<span class="external-link"><a href="https://zh.wikipedia.org/wiki/因特网" target="_blank" rel="noopener">因特网</a><i class="fa fa-external-link"></i></span>上最流行的博客系统。WordPress在最著名的网络发布阶段中脱颖而出。如今，它被使用在超过7000万个站点上。</p>
</blockquote>
<p><strong>步骤：</strong></p>
<ul>
<li><ol>
<li>注册域名</li>
</ol>
</li>
<li><ol start="2">
<li>创建VPS（虚拟专用服务器，即需要购买服务器）</li>
</ol>
</li>
<li><ol start="3">
<li>解析域名</li>
</ol>
</li>
<li><ol start="4">
<li>绑定域名</li>
</ol>
</li>
<li><ol start="5">
<li>上传配置文件</li>
</ol>
</li>
<li><ol start="6">
<li>安装使用</li>
</ol>
</li>
</ul>
<p><strong>具体详细操作详见如下文档和视频：</strong></p>
<p><span class="external-link"><a href="https://wordpress.com/create-blog/" target="_blank" rel="noopener">wordpress搭建博客</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.jianshu.com/p/d4beb61fc3c0" target="_blank" rel="noopener">教你用WordPress搭建一个简单的个人博客</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.bilibili.com/video/av9058563/?share_medium=web&amp;share_source=qq&amp;bbid=B8CCEBFD-2865-4967-9C06-001E0279A4A2155809infoc&amp;ts=1578290731898" target="_blank" rel="noopener">免费搭建自己的wordpress博客&lt;视频教程&gt;</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.bilibili.com/video/av2584946/?share_medium=web&amp;share_source=qq&amp;bbid=B8CCEBFD-2865-4967-9C06-001E0279A4A2155809infoc&amp;ts=1578292142882" target="_blank" rel="noopener">使用WordPress搭建博客网站</a><i class="fa fa-external-link"></i></span></p>
<h2 id="2-Typecho-搭建个人博客"><span class="heading-link">2.Typecho 搭建个人博客</span></h2><p>首先介绍一下Typecho：</p>
<p><strong>Typecho</strong>是一个基于<span class="external-link"><a href="https://zh.wikipedia.org/wiki/PHP" target="_blank" rel="noopener">PHP</a><i class="fa fa-external-link"></i></span>的简洁的开源博客程序。它使用多种数据库（<span class="external-link"><a href="https://zh.wikipedia.org/wiki/MySQL" target="_blank" rel="noopener">MySQL</a><i class="fa fa-external-link"></i></span>、<span class="external-link"><a href="https://zh.wikipedia.org/wiki/PostgreSQL" target="_blank" rel="noopener">PostgreSQL</a><i class="fa fa-external-link"></i></span>、<span class="external-link"><a href="https://zh.wikipedia.org/wiki/SQLite" target="_blank" rel="noopener">SQLite</a><i class="fa fa-external-link"></i></span>、<span class="external-link"><a href="https://zh.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener">MariaDB</a><i class="fa fa-external-link"></i></span>）储存数据，在<span class="external-link"><a href="https://zh.wikipedia.org/wiki/GNU通用公共许可协议" target="_blank" rel="noopener">GNU GPLv2</a><i class="fa fa-external-link"></i></span>许可证下发行</p>
<ul>
<li>搭建步骤：<ul>
<li><ol>
<li>注册域名</li>
</ol>
</li>
<li><ol start="2">
<li>购买vps</li>
</ol>
</li>
<li><ol start="3">
<li>解析域名</li>
</ol>
</li>
<li><ol start="4">
<li>环境安装</li>
</ol>
</li>
<li><ol start="5">
<li>安装typecho</li>
</ol>
</li>
</ul>
</li>
</ul>
<p><strong>具体详细操作流程可参照以下文章和视频：</strong></p>
<p><span class="external-link"><a href="https://www.typechodev.com/docs/zh_CN/" target="_blank" rel="noopener">typecho文档</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.bilibili.com/video/av58051427/" target="_blank" rel="noopener">typecho搭建自己博客网站视频</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.bilibili.com/video/av59230340/" target="_blank" rel="noopener">使用typecho搭建个人博客视频</a><i class="fa fa-external-link"></i></span></p>
<h2 id="3-使用Hugo搭建个人博客"><span class="heading-link">3.使用Hugo搭建个人博客</span></h2><p>详细介绍请参照Hugo文档：</p>
<p><span class="external-link"><a href="https://www.gohugo.org/doc/" target="_blank" rel="noopener">Hugo中文文档</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.bilibili.com/video/av49116509/" target="_blank" rel="noopener">Hugo博客搭建视频教程</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.bilibili.com/video/av62786612/" target="_blank" rel="noopener">使用Hugo搭建个人博客</a><i class="fa fa-external-link"></i></span></p>
<h2 id="4-Hexo-GitHub搭建博客"><span class="heading-link">4.Hexo+GitHub搭建博客</span></h2><p><span class="external-link"><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.bilibili.com/video/av24897960?p=3" target="_blank" rel="noopener">Hexo视频教程</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">ShanSan的好友TRHX的手把手小白教程</a><i class="fa fa-external-link"></i></span></p>
<h2 id="5-Jekyll搭建个人博客"><span class="heading-link">5.Jekyll搭建个人博客</span></h2><p><span class="external-link"><a href="https://jekyllcn.com/docs/home/" target="_blank" rel="noopener">Jekyll文档</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.bilibili.com/video/av13994132/" target="_blank" rel="noopener">Jekyll搭建个人博客视频教程</a><i class="fa fa-external-link"></i></span></p>
<h2 id="6-GitBook"><span class="heading-link">6.GitBook</span></h2><p><span class="external-link"><a href="https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html" target="_blank" rel="noopener">GitBook文档</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.bilibili.com/video/av53704955/" target="_blank" rel="noopener">GitBook视频</a><i class="fa fa-external-link"></i></span></p>
<h2 id="7-Ghost搭建博客"><span class="heading-link">7.Ghost搭建博客</span></h2><p><span class="external-link"><a href="https://ghost.org/docs/" target="_blank" rel="noopener">Ghost官方文档</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.bilibili.com/video/av6498530/" target="_blank" rel="noopener">Ghost搭建个人博客视频教程</a><i class="fa fa-external-link"></i></span></p>
<h2 id="8-VuePress搭建个人博客"><span class="heading-link">8.VuePress搭建个人博客</span></h2><p><span class="external-link"><a href="https://www.vuepress.cn/guide/" target="_blank" rel="noopener">VuePress中文文档</a><i class="fa fa-external-link"></i></span></p>
<p><span class="external-link"><a href="https://www.bilibili.com/video/av75219827/" target="_blank" rel="noopener">VuePress搭建个人博客</a><i class="fa fa-external-link"></i></span></p>
<h2 id="9-docsify搭建个人文档"><span class="heading-link">9.docsify搭建个人文档</span></h2><p><span class="external-link"><a href="https://docsify.js.org/#/" target="_blank" rel="noopener">docsify官方文档</a><i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年自我总结</title>
    <url>/2020/01/02/2019%E5%B9%B4%E8%87%AA%E6%88%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/08/l236k8.jpg" alt="你好，2020"></p>
<a id="more"></a>
<h2 id="前言"><span class="heading-link">前言</span></h2><p>时间过得很快，转眼间已经大二了，这个学期只有短短的十八周时间，使我一直忙碌与各种考试，各种课程，对自己所想学的东西一直止步与初学的状态，并且很多计划都没有得到实施。所以2019年让我感到很惭愧。现在2020年已经悄悄的来到，我开始更新了计划，希望在新的一年我的计划能够实施，不会有太多变数。<img src="https://s2.ax1x.com/2020/01/08/l23bhF.png" alt="在这里插入图片描述"></p>
<h2 id="总结2019"><span class="heading-link">总结2019</span></h2><p>在2019年了我开始接触了前端相关的内容，开始了更有方向更有目标的学习。但是回过头来想想自己还是一如既往得菜，感觉没有学什么。也许我就是所谓的行动上的弱者吧（惭愧惭愧）。在学习过程中发现自己也有很多不足之处：</p>
<ol>
<li>对于某个方面的知识大多数只是看看理论部分，忽视了行动上的操作（动手敲)。</li>
<li>会一种不学完某方面知识，就不进入下一阶段的学习，所以导致接触的很少，学得也很浅。</li>
<li>自我感觉自己的学习效率很低，也由于某些因素的影响，导致花在这方面的时间也很少（太难了）。</li>
<li>做事情有时会漫无目的，接触的东西也就零零散散。</li>
</ol>
<p>现实就是这样残酷不进则退，若不不去学习，尝试，自己就永远是在退步。 </p>
<h2 id="2020新年新期望"><span class="heading-link">2020新年新期望</span></h2><p>2020年的钟声已经敲响，希望在新的一年里，也寄托了新的期望:</p>
<ul>
<li><p>能够把计划都实现吧！！</p>
</li>
<li><p>把自己学习过程中的不足都改掉.</p>
</li>
<li><p>多看书（自己看书看太少了。。。）</p>
</li>
<li><p>新的学期多参加比赛吧。。</p>
<p>最后借亲爱的习大大新年贺词，送自己一句话：</p>
</li>
</ul>
<h2 id="只争朝夕，不负韶华"><span class="heading-link">只争朝夕，不负韶华</span></h2><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>自我总结</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>本地项目推送到github</title>
    <url>/2019/11/18/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0github/</url>
    <content><![CDATA[<p>﻿# 将本地项目推送到github</p>
<hr>
<h2 id="方法一：-使用ssh将本地项目推送到GitHub"><span class="heading-link">方法一： 使用ssh将本地项目推送到GitHub</span></h2><h6 id="补充：1-先在GitHub中新建一个repository，我新建的是名为TEST的-respository"><span class="heading-link">补充：1.先在GitHub中新建一个repository，我新建的是名为TEST的 respository</span></h6><a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20191117111038216.png" alt="在这里插入图片描述"></p>
<h6 id="2-新建完成后如图所示点击add-deploy-key"><span class="heading-link">2.新建完成后如图所示点击add deploy key</span></h6><p><img src="https://img-blog.csdnimg.cn/20191117111629133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191117112055459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<hr>
<h3 id="1-首先生成ssh密钥"><span class="heading-link">1.首先生成ssh密钥</span></h3><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "your email"</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://img-blog.csdnimg.cn/20191117105949398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片方描述"><br><em>以上三个地方按回车即可；</em></p>
<h3 id="2-找到生成的-ssh文件夹，复制id-rsa-pub，一般是位于用户目录下的-ssh目录中-把复制好的id-rsa-pub粘贴到下图的key中，Title可随意描述，最后add-key"><span class="heading-link">2.找到生成的.ssh文件夹，复制id_rsa.pub，一般是位于用户目录下的.ssh目录中,把复制好的id-rsa.pub粘贴到下图的key中，Title可随意描述，最后add key</span></h3><p><img src="https://img-blog.csdnimg.cn/20191117110646242.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191117112155216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3-检查能否成功通讯ssh-T-git-github-com"><span class="heading-link">3.检查能否成功通讯ssh -T git@github.com</span></h3><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">cd ~/.ssh    </span><br><span class="line"># 检查下自己之前有没有已经生成.ssh</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://img-blog.csdnimg.cn/20191117114208498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 如果能进入到.ssh文件目录下 ，则证明，之前生成过.ssh秘钥，可以直接使用里面的秘钥。 如果不能进入到.ssh文件目录下，则： 检测下自己之前有没有配置：<br>git config –global user.name ‘xxxxx’<br>git config –global user.email ‘<span class="external-link"><a href="mailto:xxx@xx.xxx" target="_blank" rel="noopener">xxx@xx.xxx</a><i class="fa fa-external-link"></i></span>’</p>
<h3 id="4-推送本地文件到GitHub"><span class="heading-link">4.推送本地文件到GitHub</span></h3><p><em>注意：要在推送文件的根目录下 ’git bash here‘</em><br><img src="https://img-blog.csdnimg.cn/2019111712002082.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="5-上传完成"><span class="heading-link">5.上传完成</span></h3><p>   <img src="https://img-blog.csdnimg.cn/20191117120518557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="方法二：使用https推送"><span class="heading-link">方法二：使用https推送</span></h2><h3 id="1-创建一个仓库"><span class="heading-link">1.创建一个仓库</span></h3><p><img src="https://img-blog.csdnimg.cn/2019111712130149.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/201911171215027.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>创建成功后显示如下信息：<img src="https://img-blog.csdnimg.cn/20191117121744371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以上信息告诉我们可以从这个仓库克隆出新的仓库，也可以把本地仓库的内容推送到GitHub仓库。<br>现在，我们根据 GitHub 的提示，在本地的仓库下运行命令：</p>
<p><img src="https://img-blog.csdnimg.cn/20191117122812345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>详细参见<br><span class="external-link"><a href="https://www.runoob.com/git/git-remote-repo.html" target="_blank" rel="noopener">Git 远程仓库(Github)</a><i class="fa fa-external-link"></i></span><br><span class="external-link"><a href="https://shan333.cn/2019/03/08/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0GitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/" target="_blank" rel="noopener">如何将本地项目推送到Github</a><i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>本地推送至github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记记录-浮动</title>
    <url>/2019/11/18/%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95-%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="定义"><span class="heading-link">定义</span></h3><p> 浮动:通常无法左右排列，则设置了浮动的元素会往左或者右移动，直到遇到另一个元素或者外边距</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">float:left/right;</span><br></pre></td></tr></tbody></table></div></figure>

<h6 id="高度塌陷问题"><span class="heading-link">高度塌陷问题</span></h6><p>子元素书写浮动属性后，父元素会产生高度塌陷的问题，也就是福原属高度为0的现象。</p>
<a id="more"></a>
<h6 id="解决方法"><span class="heading-link">解决方法</span></h6><p>1、直接书写父元素高度—–必须是模块高度不会改变的情况下（不提倡）<br>2、给父元素书写溢出隐藏属性:（经常）</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">overflow: hidden</span><br></pre></td></tr></tbody></table></div></figure>

<p>3、在最后一个书写浮动属性的子元素下写个空的div标签，然后给他添加一个行内样式 <strong>clear: both</strong></p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div style = "clear:both" &gt; &lt;/div&gt;</span><br></pre></td></tr></tbody></table></div></figure>

<p>4、（在第二种无法解决问题情况下）<br>eg:在body中书写</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">&lt;ul class ="clearfix"&gt;</span><br></pre></td></tr></tbody></table></div></figure>

<p>在css中设置：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">.clearfix :before{</span><br><span class="line">display: block;</span><br><span class="line">content: "";</span><br><span class="line">font-size: 0px;</span><br><span class="line">clear: both;</span><br><span class="line">overflow: hidden;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CSS相关问题解决方法</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>
