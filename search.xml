<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git常见命令的使用</title>
    <url>/2020/06/14/git%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="摘要"><span class="heading-link">摘要</span></h2><p>对于开发项目来说，我们经常用到的就是对项目的“源代码管理”，也以叫做“版本控制”，做源代码管理或版本控制的工具有很多，Git就是其中一种可以做版本控制的工具。为方便查看，写了这篇关于git命令的操作。</p>
<h2 id="对Git的说明"><span class="heading-link">对Git的说明</span></h2><p>Git本身是一个命令行工具，但是现在可以利用带图形界面的Git，比如说Source Tree ,Github Desktop等等，来更加方便的操作。但是还是有必要先熟悉命令行工具的使用。</p>
<h2 id="Git命令的使用"><span class="heading-link">Git命令的使用</span></h2><h3 id="初始化仓库"><span class="heading-link">初始化仓库</span></h3><h4 id="1-初始化仓库"><span class="heading-link">1.初始化仓库</span></h4><p>在命令行界面，先进入到项目所在目录 <code>cd [文件夹目录]</code></p>
<p>然后执行初始化命令</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://s1.ax1x.com/2020/06/13/txm3rT.png" alt="txm3rT.png"></p>
<p>初始化仓库就是创建一个空白的仓库，此命令只需执行一次，执行完后会在项目下面创建一个.git的目录</p>
<h4 id="2-观察-git目录内容"><span class="heading-link">2.观察.git目录内容</span></h4><p>查看.git目录下的东西 ，执行<code>ls -la.git</code></p>
<h3 id="查看项目当前状态"><span class="heading-link">查看项目当前状态</span></h3><p>查看项目当前的状态，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></tbody></table></div></figure>

<p><span class="external-link"><a href="https://imgchr.com/i/txmKGn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/13/txmKGn.png" alt="txmKGn.png"></a><i class="fa fa-external-link"></i></span></p>
<p><em>status</em> 是 <em>git</em> 的一个子命令，它的功能就是查看项目当前的状态。在做提交（Commit）之前，先用 <em>status</em> 查看一下项目当前的状态，它会告诉我们项目当前发生的一些变动（Changes），比如哪些文件被修改了，都修改了哪几行代码，新添加了什么，删除了什么等等。</p>
<p>我们的项目之前还没有做过任何提交，所以查看项目状态的时候，会显示有一些 <strong>Untracked file</strong>，表示还没有被跟踪的文件，就是还没有做源代码管理或者版本控制的文件。</p>
<h3 id="添加准备要提交的修改"><span class="heading-link">添加准备要提交的修改</span></h3><p>添加要包含在提交里的修改，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></tbody></table></div></figure>

<p>这里的<code>--all</code>意思就是要把在项目里当前发生的所有的变动全部包含在这次提交里。</p>
<p>但是我们有时候只想提交某一个文件时，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git add [文件名]</span><br></pre></td></tr></tbody></table></div></figure>

<h3 id="提交"><span class="heading-link">提交</span></h3><p>现在我们已经把要提交的变动放在了暂存区里，确定这次提交，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m 'init'</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://s1.ax1x.com/2020/06/13/txMeO0.png" alt="txMeO0.png"></p>
<p><em>m</em> 在这里表示 <em>message</em>，单引号<strong>‘</strong> <strong>’</strong>中的内容表示的是提交时的描述</p>
<h3 id="查看历史"><span class="heading-link">查看历史</span></h3><p>1.查看在项目里做的提交的历史记录，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://s1.ax1x.com/2020/06/13/txMlY4.png" alt="txMlY4.png"></p>
<p>2.</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></tbody></table></div></figure>

<p>这样会用更简单的形式展示历史记录。</p>
<h3 id="移除要提交的修改"><span class="heading-link">移除要提交的修改</span></h3><p>假设我们突然改主意了，想恢复之前的一个状态，也就是上一次提交的那个状态。如果不用 Git，你可能需要在编辑器里打开的这个文件的上面，不断地恢复之前对这个文件做的修改，这样就会显得很麻烦。</p>
<p>所以通过使用Git对源代码管理，执行相应的命令，就可以恢复当前对某个文件的修改。首先，第一步要做的是把它从暂存区里再拿出来，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git reset HEAD [修改的文件名]</span><br></pre></td></tr></tbody></table></div></figure>

<p>补充：重置一下最近做的这次提交</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git reset HEAD~</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://s1.ax1x.com/2020/06/13/txMYOx.png" alt="txMYOx.png"></p>
<p>第二步，恢复一下 要修改文件的状态，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git checkout -- src/main.js</span><br></pre></td></tr></tbody></table></div></figure>

<h3 id="分支"><span class="heading-link">分支</span></h3><h4 id="1：查看分支"><span class="heading-link">1：查看分支</span></h4><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></div></figure>

<h4 id="2：创建分支"><span class="heading-link">2：创建分支</span></h4><p>创建一个叫 <strong><em>develop\</em></strong> 的分支，执行：</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git branch develop</span><br></pre></td></tr></tbody></table></div></figure>

<h4 id="3：切换分支"><span class="heading-link">3：切换分支</span></h4><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></tbody></table></div></figure>

<h4 id="4：查看分支"><span class="heading-link">4：查看分支</span></h4><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></div></figure>

<p>多加了一个 <em>-a</em> 选项，它会显示项目里全部的分支</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></tbody></table></div></figure>

<h4 id="5：创建并切换分支"><span class="heading-link">5：创建并切换分支</span></h4><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git checkout -b develop</span><br></pre></td></tr></tbody></table></div></figure>

<h3 id="拉取远程仓库"><span class="heading-link">拉取远程仓库</span></h3><p>切换到 <em>master</em> 这个分支上，下载远程仓库里的新东西，同时可以把它们合并到当前这个分支上，也就是合并到 master 这个分支上</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></tbody></table></div></figure>

<p>设置了一下具体的远程，还有远程分支的名字，意思就是下载 <em>origin</em> 这个远程的 <em>master</em> 分支上的新东西，再把它们合并到本地当前的分支上。</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></tbody></table></div></figure>

<h3 id="合并分支"><span class="heading-link">合并分支</span></h3><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git merge [分支名]</span><br></pre></td></tr></tbody></table></div></figure>

<p><img src="https://s1.ax1x.com/2020/06/13/txMQkF.png" alt="txMQkF.png"></p>
<h3 id="推送到远程仓库"><span class="heading-link">推送到远程仓库</span></h3><p>origin为远程仓库的名字，master为本地的主分支</p>
<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></tbody></table></div></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>git常见命令的使用摘要</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建汇总</title>
    <url>/2020/01/06/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="几种常见的博客搭建资源汇总"><a href="#几种常见的博客搭建资源汇总" class="headerlink" title="几种常见的博客搭建资源汇总"></a>几种常见的博客搭建资源汇总</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文给出了几种常见的个人网站（博客）搭建方式的教程资源。官方文档为主，B站视频教程为辅。比较适合喜欢折腾的同学。不喜欢折腾的可以直接使用CSDN博客、博客园、<a href="https://www.yuque.com/yuque" target="_blank" rel="noopener"><strong>语雀</strong></a>等提供的服务。<strong>别忘了博客的初心是记录</strong>。</p>
<a id="more"></a>
<p>常见的个人博客、网站、知识库搭建方式如下：</p>
<p><img src="https://img.vim-cn.com/f9/975cc8edad012fd6bb712fdbbc2d311d5309a4.png" alt=""></p>
<p>动态管理系统需要使用服务器部署，因为这些系统的数据大都存放在数据库。现今大部分的云服务商（<a href="https://www.alibabacloud.com/zh/campaign/free-trial?spm=a2796.7919406.1389991.dbannerazhfreetrial.5b8c2d23QXhsV9" target="_blank" rel="noopener">阿里云</a>、<a href="https://amazonaws-china.com/cn/free/" target="_blank" rel="noopener">AWS</a>、<a href="https://cloud.tencent.com/act/free" target="_blank" rel="noopener">腾讯云</a>等等）大都提供了一个月甚至一年的服务器试用期。<!--more--></p>
<p>依赖静态站点生成器生成的网站不仅可以部署在服务器上，还可以利用一些免费的站点托管服务进行托管，比如<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub</a>、<a href="https://coding.net/help/doc/pages" target="_blank" rel="noopener">Coding</a>、<a href="https://coding.net/help/doc/pages" target="_blank" rel="noopener">Gitlab</a>等提供的Pages服务和<a href="https://docs.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">Read the Docs</a>的文档托管服务。深入折腾的同学还会接触到一些<a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" target="_blank" rel="noopener">CI/CD</a>工具链、<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/3132?fromtitle=SEO&amp;fromid=102990" target="_blank" rel="noopener">SEO</a>技巧等等。</p>
<p>对于Web开发者，你可能会接触到一些BASS服务提供商，比如<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>、<a href="https://www.bmob.cn/" target="_blank" rel="noopener">Bmob</a>、<a href="https://firebase.google.com/?hl=zh-cn" target="_blank" rel="noopener">firebase</a>。</p>
<h2 id="1-WordPress搭建个人博客"><a href="#1-WordPress搭建个人博客" class="headerlink" title="1.WordPress搭建个人博客"></a>1.WordPress搭建个人博客</h2><p>首先根据维基百科来介绍一下WordPress：</p>
<blockquote>
<p><strong>WordPress</strong>是一个以<a href="https://zh.wikipedia.org/wiki/PHP" target="_blank" rel="noopener">PHP</a>和<a href="https://zh.wikipedia.org/wiki/MySQL" target="_blank" rel="noopener">MySQL</a>为平台的<a href="https://zh.wikipedia.org/wiki/自由及开放源代码软件" target="_blank" rel="noopener">自由开源</a>的博客软件和<a href="https://zh.wikipedia.org/wiki/内容管理系统" target="_blank" rel="noopener">内容管理系统</a>。WordPress具有插件架构和模板系统。截至2018年4月，排名前1000万的网站中超过30.6%使用WordPress。WordPress是最受欢迎的网站<a href="https://zh.wikipedia.org/wiki/内容管理系统" target="_blank" rel="noopener">内容管理系统</a>。WordPress是当前<a href="https://zh.wikipedia.org/wiki/因特网" target="_blank" rel="noopener">因特网</a>上最流行的博客系统。WordPress在最著名的网络发布阶段中脱颖而出。如今，它被使用在超过7000万个站点上。</p>
</blockquote>
<p><strong>步骤：</strong></p>
<ul>
<li><ol>
<li>注册域名</li>
</ol>
</li>
<li><ol start="2">
<li>创建VPS（虚拟专用服务器，即需要购买服务器）</li>
</ol>
</li>
<li><ol start="3">
<li>解析域名</li>
</ol>
</li>
<li><ol start="4">
<li>绑定域名</li>
</ol>
</li>
<li><ol start="5">
<li>上传配置文件</li>
</ol>
</li>
<li><ol start="6">
<li>安装使用</li>
</ol>
</li>
</ul>
<p><strong>具体详细操作详见如下文档和视频：</strong></p>
<p><a href="https://wordpress.com/create-blog/" target="_blank" rel="noopener">wordpress搭建博客</a></p>
<p><a href="https://www.jianshu.com/p/d4beb61fc3c0" target="_blank" rel="noopener">教你用WordPress搭建一个简单的个人博客</a></p>
<p><a href="https://www.bilibili.com/video/av9058563/?share_medium=web&amp;share_source=qq&amp;bbid=B8CCEBFD-2865-4967-9C06-001E0279A4A2155809infoc&amp;ts=1578290731898" target="_blank" rel="noopener">免费搭建自己的wordpress博客&lt;视频教程&gt;</a></p>
<p><a href="https://www.bilibili.com/video/av2584946/?share_medium=web&amp;share_source=qq&amp;bbid=B8CCEBFD-2865-4967-9C06-001E0279A4A2155809infoc&amp;ts=1578292142882" target="_blank" rel="noopener">使用WordPress搭建博客网站</a></p>
<h2 id="2-Typecho-搭建个人博客"><a href="#2-Typecho-搭建个人博客" class="headerlink" title="2.Typecho 搭建个人博客"></a><strong>2.Typecho 搭建个人博客</strong></h2><p>首先介绍一下Typecho：</p>
<p><strong>Typecho</strong>是一个基于<a href="https://zh.wikipedia.org/wiki/PHP" target="_blank" rel="noopener">PHP</a>的简洁的开源博客程序。它使用多种数据库（<a href="https://zh.wikipedia.org/wiki/MySQL" target="_blank" rel="noopener">MySQL</a>、<a href="https://zh.wikipedia.org/wiki/PostgreSQL" target="_blank" rel="noopener">PostgreSQL</a>、<a href="https://zh.wikipedia.org/wiki/SQLite" target="_blank" rel="noopener">SQLite</a>、<a href="https://zh.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener">MariaDB</a>）储存数据，在<a href="https://zh.wikipedia.org/wiki/GNU通用公共许可协议" target="_blank" rel="noopener">GNU GPLv2</a>许可证下发行</p>
<ul>
<li>搭建步骤：<ul>
<li><ol>
<li>注册域名</li>
</ol>
</li>
<li><ol start="2">
<li>购买vps</li>
</ol>
</li>
<li><ol start="3">
<li>解析域名</li>
</ol>
</li>
<li><ol start="4">
<li>环境安装</li>
</ol>
</li>
<li><ol start="5">
<li>安装typecho</li>
</ol>
</li>
</ul>
</li>
</ul>
<p><strong>具体详细操作流程可参照以下文章和视频：</strong></p>
<p><a href="https://www.typechodev.com/docs/zh_CN/" target="_blank" rel="noopener">typecho文档</a></p>
<p><a href="https://www.bilibili.com/video/av58051427/" target="_blank" rel="noopener">typecho搭建自己博客网站视频</a></p>
<p><a href="https://www.bilibili.com/video/av59230340/" target="_blank" rel="noopener">使用typecho搭建个人博客视频</a></p>
<h2 id="3-使用Hugo搭建个人博客"><a href="#3-使用Hugo搭建个人博客" class="headerlink" title="3.使用Hugo搭建个人博客"></a><strong>3.使用Hugo搭建个人博客</strong></h2><p>详细介绍请参照Hugo文档：</p>
<p><a href="https://www.gohugo.org/doc/" target="_blank" rel="noopener">Hugo中文文档</a></p>
<p><a href="https://www.bilibili.com/video/av49116509/" target="_blank" rel="noopener">Hugo博客搭建视频教程</a></p>
<p><a href="https://www.bilibili.com/video/av62786612/" target="_blank" rel="noopener">使用Hugo搭建个人博客</a></p>
<h2 id="4-Hexo-GitHub搭建博客"><a href="#4-Hexo-GitHub搭建博客" class="headerlink" title="4.Hexo+GitHub搭建博客"></a><strong>4.Hexo+GitHub搭建博客</strong></h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></p>
<p><a href="https://www.bilibili.com/video/av24897960?p=3" target="_blank" rel="noopener">Hexo视频教程</a></p>
<p><a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">ShanSan的好友TRHX的手把手小白教程</a></p>
<h2 id="5-Jekyll搭建个人博客"><a href="#5-Jekyll搭建个人博客" class="headerlink" title="5.Jekyll搭建个人博客"></a><strong>5.Jekyll搭建个人博客</strong></h2><p><a href="https://jekyllcn.com/docs/home/" target="_blank" rel="noopener">Jekyll文档</a></p>
<p><a href="https://www.bilibili.com/video/av13994132/" target="_blank" rel="noopener">Jekyll搭建个人博客视频教程</a></p>
<h2 id="6-GitBook"><a href="#6-GitBook" class="headerlink" title="6.GitBook"></a><strong>6.GitBook</strong></h2><p><a href="https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html" target="_blank" rel="noopener">GitBook文档</a></p>
<p><a href="https://www.bilibili.com/video/av53704955/" target="_blank" rel="noopener">GitBook视频</a></p>
<h2 id="7-Ghost搭建博客"><a href="#7-Ghost搭建博客" class="headerlink" title="7.Ghost搭建博客"></a><strong>7.Ghost搭建博客</strong></h2><p><a href="https://ghost.org/docs/" target="_blank" rel="noopener">Ghost官方文档</a></p>
<p><a href="https://www.bilibili.com/video/av6498530/" target="_blank" rel="noopener">Ghost搭建个人博客视频教程</a></p>
<h2 id="8-VuePress搭建个人博客"><a href="#8-VuePress搭建个人博客" class="headerlink" title="8.VuePress搭建个人博客"></a><strong>8.VuePress搭建个人博客</strong></h2><p><a href="https://www.vuepress.cn/guide/" target="_blank" rel="noopener">VuePress中文文档</a></p>
<p><a href="https://www.bilibili.com/video/av75219827/" target="_blank" rel="noopener">VuePress搭建个人博客</a></p>
<h2 id="9-docsify搭建个人文档"><a href="#9-docsify搭建个人文档" class="headerlink" title="9.docsify搭建个人文档"></a><strong>9.docsify搭建个人文档</strong></h2><p><a href="https://docsify.js.org/#/" target="_blank" rel="noopener">docsify官方文档</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年自我总结</title>
    <url>/2020/01/02/2019%E5%B9%B4%E8%87%AA%E6%88%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/08/l236k8.jpg" alt="你好，2020"></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>时间过得很快，转眼间已经大二了，这个学期只有短短的十八周时间，使我一直忙碌与各种考试，各种课程，对自己所想学的东西一直止步与初学的状态，并且很多计划都没有得到实施。所以2019年让我感到很惭愧。现在2020年已经悄悄的来到，我开始更新了计划，希望在新的一年我的计划能够实施，不会有太多变数。<img src="https://s2.ax1x.com/2020/01/08/l23bhF.png" alt="在这里插入图片描述"></p>
<h2 id="总结2019"><a href="#总结2019" class="headerlink" title="总结2019"></a>总结2019</h2><p>在2019年了我开始接触了前端相关的内容，开始了更有方向更有目标的学习。但是回过头来想想自己还是一如既往得菜，感觉没有学什么。也许我就是所谓的行动上的弱者吧（惭愧惭愧）。在学习过程中发现自己也有很多不足之处：</p>
<ol>
<li>对于某个方面的知识大多数只是看看理论部分，忽视了行动上的操作（动手敲)。</li>
<li>会一种不学完某方面知识，就不进入下一阶段的学习，所以导致接触的很少，学得也很浅。</li>
<li>自我感觉自己的学习效率很低，也由于某些因素的影响，导致花在这方面的时间也很少（太难了）。</li>
<li>做事情有时会漫无目的，接触的东西也就零零散散。</li>
</ol>
<p>现实就是这样残酷不进则退，若不不去学习，尝试，自己就永远是在退步。 </p>
<h2 id="2020新年新期望"><a href="#2020新年新期望" class="headerlink" title="2020新年新期望"></a>2020新年新期望</h2><p>2020年的钟声已经敲响，希望在新的一年里，也寄托了新的期望:</p>
<ul>
<li><p>能够把计划都实现吧！！</p>
</li>
<li><p>把自己学习过程中的不足都改掉.</p>
</li>
<li><p>多看书（自己看书看太少了。。。）</p>
</li>
<li><p>新的学期多参加比赛吧。。</p>
<p>最后借亲爱的习大大新年贺词，送自己一句话：</p>
</li>
</ul>
<h2 id="只争朝夕，不负韶华"><a href="#只争朝夕，不负韶华" class="headerlink" title="只争朝夕，不负韶华"></a><strong><em>只争朝夕，不负韶华</em></strong></h2><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>自我总结</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>本地项目推送到github</title>
    <url>/2019/11/18/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0github/</url>
    <content><![CDATA[<p>﻿# 将本地项目推送到github</p>
<hr>
<h2 id="方法一：-使用ssh将本地项目推送到GitHub"><a href="#方法一：-使用ssh将本地项目推送到GitHub" class="headerlink" title="方法一： 使用ssh将本地项目推送到GitHub"></a>方法一： 使用ssh将本地项目推送到GitHub</h2><h6 id="补充：1-先在GitHub中新建一个repository，我新建的是名为TEST的-respository"><a href="#补充：1-先在GitHub中新建一个repository，我新建的是名为TEST的-respository" class="headerlink" title="补充：1.先在GitHub中新建一个repository，我新建的是名为TEST的 respository"></a>补充：1.先在GitHub中新建一个repository，我新建的是名为TEST的 respository</h6><a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20191117111038216.png" alt="在这里插入图片描述"></p>
<h6 id="2-新建完成后如图所示点击add-deploy-key"><a href="#2-新建完成后如图所示点击add-deploy-key" class="headerlink" title="2.新建完成后如图所示点击add deploy key"></a>2.新建完成后如图所示点击add deploy key</h6><p><img src="https://img-blog.csdnimg.cn/20191117111629133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191117112055459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<hr>
<h3 id="1-首先生成ssh密钥"><a href="#1-首先生成ssh密钥" class="headerlink" title="1.首先生成ssh密钥"></a>1.首先生成ssh密钥</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "your email"</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20191117105949398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片方描述"><br><em>以上三个地方按回车即可；</em></p>
<h3 id="2-找到生成的-ssh文件夹，复制id-rsa-pub，一般是位于用户目录下的-ssh目录中-把复制好的id-rsa-pub粘贴到下图的key中，Title可随意描述，最后add-key"><a href="#2-找到生成的-ssh文件夹，复制id-rsa-pub，一般是位于用户目录下的-ssh目录中-把复制好的id-rsa-pub粘贴到下图的key中，Title可随意描述，最后add-key" class="headerlink" title="2.找到生成的.ssh文件夹，复制id_rsa.pub，一般是位于用户目录下的.ssh目录中,把复制好的id-rsa.pub粘贴到下图的key中，Title可随意描述，最后add key"></a>2.找到生成的.ssh文件夹，复制id_rsa.pub，一般是位于用户目录下的.ssh目录中,把复制好的id-rsa.pub粘贴到下图的key中，Title可随意描述，最后add key</h3><p><img src="https://img-blog.csdnimg.cn/20191117110646242.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191117112155216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3-检查能否成功通讯ssh-T-git-github-com"><a href="#3-检查能否成功通讯ssh-T-git-github-com" class="headerlink" title="3.检查能否成功通讯ssh -T git@github.com"></a>3.检查能否成功通讯<code>ssh -T git@github.com</code></h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd ~/.ssh    </span><br><span class="line"># 检查下自己之前有没有已经生成.ssh</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20191117114208498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 如果能进入到.ssh文件目录下 ，则证明，之前生成过.ssh秘钥，可以直接使用里面的秘钥。 如果不能进入到.ssh文件目录下，则： 检测下自己之前有没有配置：<br>git config –global user.name ‘xxxxx’<br>git config –global user.email ‘<a href="mailto:xxx@xx.xxx" target="_blank" rel="noopener">xxx@xx.xxx</a>’</p>
<h3 id="4-推送本地文件到GitHub"><a href="#4-推送本地文件到GitHub" class="headerlink" title="4.推送本地文件到GitHub"></a>4.推送本地文件到GitHub</h3><p><em>注意：要在推送文件的根目录下 ’git bash here‘</em><br><img src="https://img-blog.csdnimg.cn/2019111712002082.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="5-上传完成"><a href="#5-上传完成" class="headerlink" title="5.上传完成"></a>5.上传完成</h3><p>   <img src="https://img-blog.csdnimg.cn/20191117120518557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="方法二：使用https推送"><a href="#方法二：使用https推送" class="headerlink" title="方法二：使用https推送"></a>方法二：使用https推送</h2><h3 id="1-创建一个仓库"><a href="#1-创建一个仓库" class="headerlink" title="1.创建一个仓库"></a>1.创建一个仓库</h3><p><img src="https://img-blog.csdnimg.cn/2019111712130149.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/201911171215027.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>创建成功后显示如下信息：<img src="https://img-blog.csdnimg.cn/20191117121744371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以上信息告诉我们可以从这个仓库克隆出新的仓库，也可以把本地仓库的内容推送到GitHub仓库。<br>现在，我们根据 GitHub 的提示，在本地的仓库下运行命令：</p>
<p><img src="https://img-blog.csdnimg.cn/20191117122812345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4OTI1OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>详细参见<br><a href="https://www.runoob.com/git/git-remote-repo.html" target="_blank" rel="noopener">Git 远程仓库(Github)</a><br><a href="https://shan333.cn/2019/03/08/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0GitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/" target="_blank" rel="noopener">如何将本地项目推送到Github</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>本地推送至github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记记录-浮动</title>
    <url>/2019/11/18/%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95-%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p> 浮动:通常无法左右排列，则设置了浮动的元素会往左或者右移动，直到遇到另一个元素或者外边距</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">float:left/right;</span><br></pre></td></tr></tbody></table></figure>

<h6 id="高度塌陷问题"><a href="#高度塌陷问题" class="headerlink" title="高度塌陷问题"></a>高度塌陷问题</h6><p>子元素书写浮动属性后，父元素会产生高度塌陷的问题，也就是福原属高度为0的现象。</p>
<a id="more"></a>
<h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h6><p>1、直接书写父元素高度—–必须是模块高度不会改变的情况下（不提倡）<br>2、给父元素书写溢出隐藏属性:（经常）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">overflow: hidden</span><br></pre></td></tr></tbody></table></figure>

<p>3、在最后一个书写浮动属性的子元素下写个空的div标签，然后给他添加一个行内样式 <strong>clear: both</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div style = "clear:both" &gt; &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>4、（在第二种无法解决问题情况下）<br>eg:在body中书写</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;ul class ="clearfix"&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>在css中设置：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">.clearfix :before{</span><br><span class="line">display: block;</span><br><span class="line">content: "";</span><br><span class="line">font-size: 0px;</span><br><span class="line">clear: both;</span><br><span class="line">overflow: hidden;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CSS相关问题解决方法</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>
